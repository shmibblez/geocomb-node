"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GPoint3 = exports.Point3 = exports.Icosahedron = exports.HashProperties = void 0;
// const bindings = require("build/Release/geocomb.node");
const bindings = require("bindings")("geocomb");
// /**
//  * hash type, modifies returned hash properties
//  * - rowCol (defualt): returns point row, col, and res
//  * - number: returns point number for res, and res
//  * - NOTE: only rowCol is supported
//  */
// export type HashType = "rowCol" | "number";
/**
 * hash properties, stores point row & col for res on geocomb grid
 */
class HashProperties {
}
exports.HashProperties = HashProperties;
/**
 * Icosahedron class, used for hash generation
 */
class Icosahedron {
    /**
     * Icosahedron constructor
     * @param mapOrientation Icosahedron orientation on globe map
     * @param rotationMethod technique to use to rotate points
     */
    constructor(mapOrientation = "ECEF", rotationMethod = "gnomonic") {
        this.mo = mapOrientation;
        this.rm = rotationMethod;
        this.ico = new bindings.Icosahedron(mapOrientation, rotationMethod);
    }
    /**
     * generates point on globe, for use with Icosahedron#hash()
     * @param lat point latitude
     * @param lon point longitude
     * @retunrs Point3
     */
    pointFromCoords(lat, lon) {
        return this.ico.pointFromCoords(lat, lon);
    }
    /**
     * generates hash for point
     * @param point point to hash
     * @param res geocomb grid resolution
     * @returns HashProperties for point on geocomb grid
     */
    hash(point, res) {
        return this.ico.hash(point, res);
    }
}
exports.Icosahedron = Icosahedron;
/**
 * Point class, used for storing locations
 */
class Point3 {
    /**
     * Point3 constructor
     * @param x point's x coordinate
     * @param y point's y coordinate
     * @param z point's z coordinate
     */
    constructor(x, y, z, triNum = -1, isPC = false) {
        this.x = x;
        this.y = y;
        this.z = z;
        this.triNum = triNum;
        this.isPC = isPC;
    }
}
exports.Point3 = Point3;
/**
 * GPoint3 class, generated by Icosahedron, additionally stores row and col on geocomb grid for res
 */
class GPoint3 extends Point3 {
}
exports.GPoint3 = GPoint3;
